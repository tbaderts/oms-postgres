spring:
  application:
    name: oms
  datasource:
    url: jdbc:postgresql://${SPRING_DATASOURCE_HOST:localhost}:5432/oms
    username: postgres
    password: changeme
    hikari:
      minimum-idle: 8
      maximum-pool-size: 32
  threads:
    virtual:
      enabled: false
  jpa:
    generate-ddl: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        ddl-auto: create-drop
    show-sql: false
  cloud:
    function:
        definition: consumer
    stream:
      bindings:
        consumer-in-0:
          destination: oms_transactions
          group: oms_consumer_group
          content-type: application/*+avro
          consumer:
            concurrency: 1
            use-native-decoding: false
        order-out-0:
          destination: oms_orders
          content-type: application/*+avro
          producer:
            use-native-encoding: false
      kafka:
        binder:
          brokers: ${BROKER_HOST:localhost}:9092
          configuration:
            schema:
              registry:
                url: http://localhost:8081
            transaction:
              transaction-id-prefix: tx-
              enable: true
              acks: all
              retries: 3
            isolation:
              level: read_committed
            consumer:
              key.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
              value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
              enableDlq: true
              dlqName: oms_dlq
              properties:
                enable:
                  idempotence: true
                acks: all
                retries: 3
                max:
                  in:
                    flight:
                      requests:
                        per:
                          connection: 1
            producer:
              key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
              value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
            enable:
              idempotence: true
            acks: all
            retries: 3
            max:
              in:
                flight:
                  requests:
                    per:
                      connection: 1
      default:
        content-type: application/json
        consumer:
          concurrency: 1

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    sampling:
      probability: 1.0
    
springdoc:
  show-actuator: true

tracing:
  url: http://${JAEGER_HOST:localhost}:4317

logging:
  level:
    org.hibernate.SQL: INFO
    org.springframework.transaction: INFO

server:
  port: 8090